// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChessMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///开始游戏通知
  /// </summary>
  public partial class Actor_StartGame : pb::IMessage {
    private static readonly pb::MessageParser<Actor_StartGame> _parser = new pb::MessageParser<Actor_StartGame>(() => (Actor_StartGame)MessagePool.Instance.Fetch(typeof(Actor_StartGame)));
    public static pb::MessageParser<Actor_StartGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int roomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ChessPlayer> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.ChessPlayer.Parser);
    private pbc::RepeatedField<global::ETHotfix.ChessPlayer> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.ChessPlayer>();
    /// <summary>
    ///开始游戏所有玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.ChessPlayer> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_roomConfigs_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> roomConfigs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///房间配置信息
    /// </summary>
    public pbc::RepeatedField<int> RoomConfigs {
      get { return roomConfigs_; }
      set { roomConfigs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      roomConfigs_.WriteTo(output, _repeated_roomConfigs_codec);
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      size += roomConfigs_.CalculateSize(_repeated_roomConfigs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      roomConfigs_.Clear();
      roomId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 18:
          case 16: {
            roomConfigs_.AddEntriesFrom(input, _repeated_roomConfigs_codec);
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家信息
  /// </summary>
  public partial class ChessPlayer : pb::IMessage {
    private static readonly pb::MessageParser<ChessPlayer> _parser = new pb::MessageParser<ChessPlayer>(() => (ChessPlayer)MessagePool.Instance.Fetch(typeof(ChessPlayer)));
    public static pb::MessageParser<ChessPlayer> Parser { get { return _parser; } }

    private int seatIndex_;
    /// <summary>
    ///座位索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private global::ETHotfix.User user_;
    /// <summary>
    ///用户信息
    /// </summary>
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_playCards_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> playCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///出牌信息
    /// </summary>
    public pbc::RepeatedField<int> PlayCards {
      get { return playCards_; }
      set { playCards_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ChessOperateInfo> _repeated_operateInfos_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.ChessOperateInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.ChessOperateInfo> operateInfos_ = new pbc::RepeatedField<global::ETHotfix.ChessOperateInfo>();
    /// <summary>
    ///操作信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.ChessOperateInfo> OperateInfos {
      get { return operateInfos_; }
      set { operateInfos_ = value; }
    }

    private int nowHP_;
    /// <summary>
    ///当前血量
    /// </summary>
    public int NowHP {
      get { return nowHP_; }
      set {
        nowHP_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_handCards_codec
        = pb::FieldCodec.ForInt32(50);
    private pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手里的牌
    /// </summary>
    public pbc::RepeatedField<int> HandCards {
      get { return handCards_; }
      set { handCards_ = value; }
    }

    private int winCount_;
    /// <summary>
    ///赢的次数
    /// </summary>
    public int WinCount {
      get { return winCount_; }
      set {
        winCount_ = value;
      }
    }

    private int defeatCount_;
    /// <summary>
    ///输的次数
    /// </summary>
    public int DefeatCount {
      get { return defeatCount_; }
      set {
        defeatCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      playCards_.WriteTo(output, _repeated_playCards_codec);
      operateInfos_.WriteTo(output, _repeated_operateInfos_codec);
      if (NowHP != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NowHP);
      }
      handCards_.WriteTo(output, _repeated_handCards_codec);
      if (WinCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WinCount);
      }
      if (DefeatCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DefeatCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += playCards_.CalculateSize(_repeated_playCards_codec);
      size += operateInfos_.CalculateSize(_repeated_operateInfos_codec);
      if (NowHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowHP);
      }
      size += handCards_.CalculateSize(_repeated_handCards_codec);
      if (WinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCount);
      }
      if (DefeatCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefeatCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      playCards_.Clear();
      for (int i = 0; i < operateInfos_.Count; i++) { MessagePool.Instance.Recycle(operateInfos_[i]); }
      operateInfos_.Clear();
      nowHP_ = 0;
      handCards_.Clear();
      winCount_ = 0;
      defeatCount_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 26:
          case 24: {
            playCards_.AddEntriesFrom(input, _repeated_playCards_codec);
            break;
          }
          case 34: {
            operateInfos_.AddEntriesFrom(input, _repeated_operateInfos_codec);
            break;
          }
          case 40: {
            NowHP = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
            break;
          }
          case 56: {
            WinCount = input.ReadInt32();
            break;
          }
          case 64: {
            DefeatCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家操作信息
  /// </summary>
  public partial class ChessOperateInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChessOperateInfo> _parser = new pb::MessageParser<ChessOperateInfo>(() => (ChessOperateInfo)MessagePool.Instance.Fetch(typeof(ChessOperateInfo)));
    public static pb::MessageParser<ChessOperateInfo> Parser { get { return _parser; } }

    private int card_;
    /// <summary>
    ///操作的卡片
    /// </summary>
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private int operationType_;
    /// <summary>
    /// </summary>
    public int OperationType {
      get { return operationType_; }
      set {
        operationType_ = value;
      }
    }

    private int playCardIndex_;
    /// <summary>
    ///玩家z索引
    /// </summary>
    public int PlayCardIndex {
      get { return playCardIndex_; }
      set {
        playCardIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (OperationType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OperationType);
      }
      if (PlayCardIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayCardIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (OperationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationType);
      }
      if (PlayCardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayCardIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      card_ = 0;
      operationType_ = 0;
      playCardIndex_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
          case 16: {
            OperationType = input.ReadInt32();
            break;
          }
          case 24: {
            PlayCardIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
